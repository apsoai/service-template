/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    get: operations["HealthCheckController_healthCheck"];
  };
  "/logs": {
    get: operations["LogsController_getLogs"];
  };
  "/metrics": {
    get: operations["MetricsController_getMetricsByDateRange"];
  };
  "/ApplicationServiceMetrics": {
    /** Retrieve multiple ApplicationServiceMetrics */
    get: operations["getManyBaseApplicationServiceMetricControllerApplicationServiceMetric"];
    /** Create a single ApplicationServiceMetric */
    post: operations["createOneBaseApplicationServiceMetricControllerApplicationServiceMetric"];
  };
  "/ApplicationServiceMetrics/{id}": {
    /** Retrieve a single ApplicationServiceMetric */
    get: operations["getOneBaseApplicationServiceMetricControllerApplicationServiceMetric"];
    /** Replace a single ApplicationServiceMetric */
    put: operations["replaceOneBaseApplicationServiceMetricControllerApplicationServiceMetric"];
    /** Delete a single ApplicationServiceMetric */
    delete: operations["deleteOneBaseApplicationServiceMetricControllerApplicationServiceMetric"];
    /** Update a single ApplicationServiceMetric */
    patch: operations["updateOneBaseApplicationServiceMetricControllerApplicationServiceMetric"];
  };
  "/ApplicationServiceMetrics/bulk": {
    /** Create multipleApplicationServiceMetrics */
    post: operations["createManyBaseApplicationServiceMetricControllerApplicationServiceMetric"];
  };
  "/deploymentLocations": {
    get: operations["DeploymentLocationController_getDeploymentLocations"];
  };
  "/serviceBuild/provision/{applicationServiceId}": {
    post: operations["ServiceBuildController_provision"];
  };
  "/serviceBuild/init/{applicationServiceId}": {
    post: operations["ServiceBuildController_init"];
  };
  "/serviceBuild/scaffold/{applicationServiceId}": {
    post: operations["ServiceBuildController_scaffold"];
  };
  "/serviceBuild/deploy/{applicationServiceId}": {
    post: operations["ServiceBuildController_deploy"];
  };
  "/serviceBuild/destroy/{applicationServiceId}": {
    post: operations["ServiceBuildController_destroy"];
  };
  "/ApplicationServices": {
    /** Retrieve multiple ApplicationServices */
    get: operations["getManyBaseApplicationServiceControllerApplicationService"];
    /** Create a single ApplicationService */
    post: operations["createOneBaseApplicationServiceControllerApplicationService"];
  };
  "/ApplicationServices/{id}": {
    /** Retrieve a single ApplicationService */
    get: operations["getOneBaseApplicationServiceControllerApplicationService"];
    /** Replace a single ApplicationService */
    put: operations["replaceOneBaseApplicationServiceControllerApplicationService"];
    /** Delete a single ApplicationService */
    delete: operations["deleteOneBaseApplicationServiceControllerApplicationService"];
    /** Update a single ApplicationService */
    patch: operations["updateOneBaseApplicationServiceControllerApplicationService"];
  };
  "/ApplicationServices/bulk": {
    /** Create multipleApplicationServices */
    post: operations["createManyBaseApplicationServiceControllerApplicationService"];
  };
  "/InfrastructureStacks": {
    /** Retrieve multiple InfrastructureStacks */
    get: operations["getManyBaseInfrastructureStackControllerInfrastructureStack"];
    /** Create a single InfrastructureStack */
    post: operations["createOneBaseInfrastructureStackControllerInfrastructureStack"];
  };
  "/InfrastructureStacks/{id}": {
    /** Retrieve a single InfrastructureStack */
    get: operations["getOneBaseInfrastructureStackControllerInfrastructureStack"];
    /** Replace a single InfrastructureStack */
    put: operations["replaceOneBaseInfrastructureStackControllerInfrastructureStack"];
    /** Delete a single InfrastructureStack */
    delete: operations["deleteOneBaseInfrastructureStackControllerInfrastructureStack"];
    /** Update a single InfrastructureStack */
    patch: operations["updateOneBaseInfrastructureStackControllerInfrastructureStack"];
  };
  "/InfrastructureStacks/bulk": {
    /** Create multipleInfrastructureStacks */
    post: operations["createManyBaseInfrastructureStackControllerInfrastructureStack"];
  };
  "/Users": {
    /** Retrieve multiple Users */
    get: operations["getManyBaseUserControllerUser"];
    /** Create a single User */
    post: operations["createOneBaseUserControllerUser"];
  };
  "/Users/{id}": {
    /** Retrieve a single User */
    get: operations["getOneBaseUserControllerUser"];
    /** Replace a single User */
    put: operations["replaceOneBaseUserControllerUser"];
    /** Delete a single User */
    delete: operations["deleteOneBaseUserControllerUser"];
    /** Update a single User */
    patch: operations["updateOneBaseUserControllerUser"];
  };
  "/Users/bulk": {
    /** Create multipleUsers */
    post: operations["createManyBaseUserControllerUser"];
  };
  "/Workspaces": {
    /** Retrieve multiple Workspaces */
    get: operations["getManyBaseWorkspaceControllerWorkspace"];
    /** Create a single Workspace */
    post: operations["createOneBaseWorkspaceControllerWorkspace"];
  };
  "/Workspaces/{id}": {
    /** Retrieve a single Workspace */
    get: operations["getOneBaseWorkspaceControllerWorkspace"];
    /** Replace a single Workspace */
    put: operations["replaceOneBaseWorkspaceControllerWorkspace"];
    /** Delete a single Workspace */
    delete: operations["deleteOneBaseWorkspaceControllerWorkspace"];
    /** Update a single Workspace */
    patch: operations["updateOneBaseWorkspaceControllerWorkspace"];
  };
  "/Workspaces/bulk": {
    /** Create multipleWorkspaces */
    post: operations["createManyBaseWorkspaceControllerWorkspace"];
  };
  "/WorkspaceUsers": {
    /** Retrieve multiple WorkspaceUsers */
    get: operations["getManyBaseWorkspaceUserControllerWorkspaceUser"];
    /** Create a single WorkspaceUser */
    post: operations["createOneBaseWorkspaceUserControllerWorkspaceUser"];
  };
  "/WorkspaceUsers/{id}": {
    /** Retrieve a single WorkspaceUser */
    get: operations["getOneBaseWorkspaceUserControllerWorkspaceUser"];
    /** Replace a single WorkspaceUser */
    put: operations["replaceOneBaseWorkspaceUserControllerWorkspaceUser"];
    /** Delete a single WorkspaceUser */
    delete: operations["deleteOneBaseWorkspaceUserControllerWorkspaceUser"];
    /** Update a single WorkspaceUser */
    patch: operations["updateOneBaseWorkspaceUserControllerWorkspaceUser"];
  };
  "/WorkspaceUsers/bulk": {
    /** Create multipleWorkspaceUsers */
    post: operations["createManyBaseWorkspaceUserControllerWorkspaceUser"];
  };
  "/Applications": {
    /** Retrieve multiple Applications */
    get: operations["getManyBaseApplicationControllerApplication"];
    /** Create a single Application */
    post: operations["createOneBaseApplicationControllerApplication"];
  };
  "/Applications/{id}": {
    /** Retrieve a single Application */
    get: operations["getOneBaseApplicationControllerApplication"];
    /** Replace a single Application */
    put: operations["replaceOneBaseApplicationControllerApplication"];
    /** Delete a single Application */
    delete: operations["deleteOneBaseApplicationControllerApplication"];
    /** Update a single Application */
    patch: operations["updateOneBaseApplicationControllerApplication"];
  };
  "/Applications/bulk": {
    /** Create multipleApplications */
    post: operations["createManyBaseApplicationControllerApplication"];
  };
  "/ApplicationServiceModels": {
    /** Retrieve multiple ApplicationServiceModels */
    get: operations["getManyBaseApplicationServiceModelControllerApplicationServiceModel"];
    /** Create a single ApplicationServiceModel */
    post: operations["createOneBaseApplicationServiceModelControllerApplicationServiceModel"];
  };
  "/ApplicationServiceModels/{id}": {
    /** Retrieve a single ApplicationServiceModel */
    get: operations["getOneBaseApplicationServiceModelControllerApplicationServiceModel"];
    /** Replace a single ApplicationServiceModel */
    put: operations["replaceOneBaseApplicationServiceModelControllerApplicationServiceModel"];
    /** Delete a single ApplicationServiceModel */
    delete: operations["deleteOneBaseApplicationServiceModelControllerApplicationServiceModel"];
    /** Update a single ApplicationServiceModel */
    patch: operations["updateOneBaseApplicationServiceModelControllerApplicationServiceModel"];
  };
  "/ApplicationServiceModels/bulk": {
    /** Create multipleApplicationServiceModels */
    post: operations["createManyBaseApplicationServiceModelControllerApplicationServiceModel"];
  };
  "/ApplicationServiceModelFields": {
    /** Retrieve multiple ApplicationServiceModelFields */
    get: operations["getManyBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
    /** Create a single ApplicationServiceModelField */
    post: operations["createOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
  };
  "/ApplicationServiceModelFields/{id}": {
    /** Retrieve a single ApplicationServiceModelField */
    get: operations["getOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
    /** Replace a single ApplicationServiceModelField */
    put: operations["replaceOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
    /** Delete a single ApplicationServiceModelField */
    delete: operations["deleteOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
    /** Update a single ApplicationServiceModelField */
    patch: operations["updateOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
  };
  "/ApplicationServiceModelFields/bulk": {
    /** Create multipleApplicationServiceModelFields */
    post: operations["createManyBaseApplicationServiceModelFieldControllerApplicationServiceModelField"];
  };
  "/ApplicationServiceModelAssociations": {
    /** Retrieve multiple ApplicationServiceModelAssociations */
    get: operations["getManyBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
    /** Create a single ApplicationServiceModelAssociation */
    post: operations["createOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
  };
  "/ApplicationServiceModelAssociations/{id}": {
    /** Retrieve a single ApplicationServiceModelAssociation */
    get: operations["getOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
    /** Replace a single ApplicationServiceModelAssociation */
    put: operations["replaceOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
    /** Delete a single ApplicationServiceModelAssociation */
    delete: operations["deleteOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
    /** Update a single ApplicationServiceModelAssociation */
    patch: operations["updateOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
  };
  "/ApplicationServiceModelAssociations/bulk": {
    /** Create multipleApplicationServiceModelAssociations */
    post: operations["createManyBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation"];
  };
  "/ApplicationServiceApiKeys": {
    /** Retrieve multiple ApplicationServiceApiKeys */
    get: operations["getManyBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
    /** Create a single ApplicationServiceApiKey */
    post: operations["createOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
  };
  "/ApplicationServiceApiKeys/{id}": {
    /** Retrieve a single ApplicationServiceApiKey */
    get: operations["getOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
    /** Replace a single ApplicationServiceApiKey */
    put: operations["replaceOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
    /** Delete a single ApplicationServiceApiKey */
    delete: operations["deleteOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
    /** Update a single ApplicationServiceApiKey */
    patch: operations["updateOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
  };
  "/ApplicationServiceApiKeys/bulk": {
    /** Create multipleApplicationServiceApiKeys */
    post: operations["createManyBaseApplicationServiceApiKeyControllerApplicationServiceApiKey"];
  };
  "/SchemaTemplates": {
    /** Retrieve multiple SchemaTemplates */
    get: operations["getManyBaseSchemaTemplateControllerSchemaTemplate"];
    /** Create a single SchemaTemplate */
    post: operations["createOneBaseSchemaTemplateControllerSchemaTemplate"];
  };
  "/SchemaTemplates/{id}": {
    /** Retrieve a single SchemaTemplate */
    get: operations["getOneBaseSchemaTemplateControllerSchemaTemplate"];
    /** Replace a single SchemaTemplate */
    put: operations["replaceOneBaseSchemaTemplateControllerSchemaTemplate"];
    /** Delete a single SchemaTemplate */
    delete: operations["deleteOneBaseSchemaTemplateControllerSchemaTemplate"];
    /** Update a single SchemaTemplate */
    patch: operations["updateOneBaseSchemaTemplateControllerSchemaTemplate"];
  };
  "/SchemaTemplates/bulk": {
    /** Create multipleSchemaTemplates */
    post: operations["createManyBaseSchemaTemplateControllerSchemaTemplate"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    LogDto: {
      /** Format: date-time */
      date: string;
      message: string;
    };
    MetricDto: {
      application_service_id: number;
      /** @enum {string} */
      metric_type: "Bandwidth" | "Request" | "Error";
      date: string;
      value: number;
    };
    GetManyApplicationServiceMetricResponseDto: {
      data: components["schemas"]["ApplicationServiceMetric"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    ApplicationServiceMetric: {
      id: number;
      /** @enum {string} */
      metric_type: "Bandwidth" | "Request" | "Error";
      date: string;
      value: number;
      applicationServiceId: number;
      /** Format: date-time */
      created_at: string;
    };
    ApplicationServiceMetricCreate: {
      /** @enum {string} */
      metric_type: "Bandwidth" | "Request" | "Error";
      date: string;
      value: number;
      applicationServiceId: number;
    };
    CreateManyApplicationServiceMetricDto: {
      bulk: components["schemas"]["ApplicationServiceMetricCreate"][];
    };
    DeploymentLocationDto: {
      key: string;
      value: string;
      default?: boolean;
    };
    GetManyApplicationServiceResponseDto: {
      data: components["schemas"]["ApplicationService"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    ApplicationService: {
      id: number;
      name: string;
      /** @enum {string} */
      status: "Active" | "Draft" | "Archived";
      /** @enum {string} */
      build_status: "New" | "ProvisioningDatabase" | "DatabaseProvisioned" | "InitializingService" | "ServiceInitialized" | "Scaffolding" | "ReadyToBuild" | "Building" | "BuildDone" | "Ready";
      subdomain: string;
      deployment_location: string;
      /** @enum {string} */
      service_type: "Lambda" | "Shared" | "Standalone";
      stack_id: string;
      environment_name: string;
      infrastructure_details: Record<string, never>;
      apsorc: Record<string, never>;
      base_url: string;
      applicationId: number;
      networkStackId: number;
      databaseStackId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ApplicationServiceCreate: {
      name: string;
      /** @enum {string} */
      status: "Active" | "Draft" | "Archived";
      /** @enum {string} */
      build_status: "New" | "ProvisioningDatabase" | "DatabaseProvisioned" | "InitializingService" | "ServiceInitialized" | "Scaffolding" | "ReadyToBuild" | "Building" | "BuildDone" | "Ready";
      subdomain: string;
      deployment_location: string;
      /** @enum {string} */
      service_type: "Lambda" | "Shared" | "Standalone";
      stack_id: string;
      environment_name: string;
      infrastructure_details: Record<string, never>;
      apsorc: Record<string, never>;
      base_url: string;
      applicationId: number;
      networkStackId: number;
      databaseStackId: number;
    };
    CreateManyApplicationServiceDto: {
      bulk: components["schemas"]["ApplicationServiceCreate"][];
    };
    GetManyInfrastructureStackResponseDto: {
      data: components["schemas"]["InfrastructureStack"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    InfrastructureStack: {
      id: number;
      stackId: string;
      /** @enum {string} */
      stack_type: "network" | "database";
      /** @enum {string} */
      status: "new" | "creating" | "created" | "active" | "inactive" | "destroyed";
      details: Record<string, never>;
      networkStackId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    InfrastructureStackCreate: {
      stackId: string;
      /** @enum {string} */
      stack_type: "network" | "database";
      /** @enum {string} */
      status: "new" | "creating" | "created" | "active" | "inactive" | "destroyed";
      details: Record<string, never>;
      networkStackId: number;
    };
    CreateManyInfrastructureStackDto: {
      bulk: components["schemas"]["InfrastructureStackCreate"][];
    };
    GetManyUserResponseDto: {
      data: components["schemas"]["User"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    User: {
      id: number;
      cognito_id: string;
      email: string;
      fullName: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    UserCreate: {
      cognito_id: string;
      email: string;
      fullName: string;
    };
    CreateManyUserDto: {
      bulk: components["schemas"]["UserCreate"][];
    };
    GetManyWorkspaceResponseDto: {
      data: components["schemas"]["Workspace"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    Workspace: {
      id: number;
      name: string;
      /** @enum {string} */
      status: "Active" | "Deleted";
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    WorkspaceCreate: {
      name: string;
      /** @enum {string} */
      status: "Active" | "Deleted";
    };
    CreateManyWorkspaceDto: {
      bulk: components["schemas"]["WorkspaceCreate"][];
    };
    GetManyWorkspaceUserResponseDto: {
      data: components["schemas"]["WorkspaceUser"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    WorkspaceUser: {
      id: number;
      email: string;
      invite_code: string;
      /** @enum {string} */
      role: "User" | "Admin" | "Owner";
      /** @enum {string} */
      status: "Active" | "Invited" | "Inactive" | "Deleted";
      activeAt: string;
      userId: number;
      workspaceId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    WorkspaceUserCreate: {
      email: string;
      invite_code: string;
      /** @enum {string} */
      role: "User" | "Admin" | "Owner";
      /** @enum {string} */
      status: "Active" | "Invited" | "Inactive" | "Deleted";
      activeAt: string;
      userId: number;
      workspaceId: number;
    };
    CreateManyWorkspaceUserDto: {
      bulk: components["schemas"]["WorkspaceUserCreate"][];
    };
    GetManyApplicationResponseDto: {
      data: components["schemas"]["Application"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    Application: {
      id: number;
      name: string;
      /** @enum {string} */
      status: "Active" | "Deleted";
      workspaceId: number;
      ownerId: number;
      sharedDatabaseStackId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ApplicationCreate: {
      name: string;
      /** @enum {string} */
      status: "Active" | "Deleted";
      workspaceId: number;
      ownerId: number;
      sharedDatabaseStackId: number;
    };
    CreateManyApplicationDto: {
      bulk: components["schemas"]["ApplicationCreate"][];
    };
    GetManyApplicationServiceModelResponseDto: {
      data: components["schemas"]["ApplicationServiceModel"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    ApplicationServiceModel: {
      id: number;
      name: string;
      applicationServiceId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ApplicationServiceModelCreate: {
      name: string;
      applicationServiceId: number;
    };
    CreateManyApplicationServiceModelDto: {
      bulk: components["schemas"]["ApplicationServiceModelCreate"][];
    };
    GetManyApplicationServiceModelFieldResponseDto: {
      data: components["schemas"]["ApplicationServiceModelField"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    ApplicationServiceModelField: {
      id: number;
      name: string;
      type: string;
      applicationServiceModelId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ApplicationServiceModelFieldCreate: {
      name: string;
      type: string;
      applicationServiceModelId: number;
    };
    CreateManyApplicationServiceModelFieldDto: {
      bulk: components["schemas"]["ApplicationServiceModelFieldCreate"][];
    };
    GetManyApplicationServiceModelAssociationResponseDto: {
      data: components["schemas"]["ApplicationServiceModelAssociation"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    ApplicationServiceModelAssociation: {
      id: number;
      name: string;
      applicationServiceModelId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ApplicationServiceModelAssociationCreate: {
      name: string;
      applicationServiceModelId: number;
    };
    CreateManyApplicationServiceModelAssociationDto: {
      bulk: components["schemas"]["ApplicationServiceModelAssociationCreate"][];
    };
    GetManyApplicationServiceApiKeyResponseDto: {
      data: components["schemas"]["ApplicationServiceApiKey"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    ApplicationServiceApiKey: {
      id: number;
      name: string;
      /** @enum {string} */
      access_rights: "FullAccess" | "ReadOnly";
      expires_at: string;
      /** @enum {string} */
      status: "Active" | "Inactive";
      key: string;
      applicationServiceId: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    ApplicationServiceApiKeyCreate: {
      name: string;
      /** @enum {string} */
      access_rights: "FullAccess" | "ReadOnly";
      expires_at: string;
      /** @enum {string} */
      status: "Active" | "Inactive";
      key: string;
      applicationServiceId: number;
    };
    CreateManyApplicationServiceApiKeyDto: {
      bulk: components["schemas"]["ApplicationServiceApiKeyCreate"][];
    };
    GetManySchemaTemplateResponseDto: {
      data: components["schemas"]["SchemaTemplate"][];
      count: number;
      total: number;
      page: number;
      pageCount: number;
    };
    SchemaTemplate: {
      id: number;
      name: string;
      description: string;
      logoURL: string;
      apsorc: Record<string, never>;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    SchemaTemplateCreate: {
      name: string;
      description: string;
      logoURL: string;
      apsorc: Record<string, never>;
    };
    CreateManySchemaTemplateDto: {
      bulk: components["schemas"]["SchemaTemplateCreate"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  HealthCheckController_healthCheck: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  LogsController_getLogs: {
    parameters: {
      query?: {
        messageFilter?: string;
        startTime?: string;
        endTime?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LogDto"][];
        };
      };
    };
  };
  MetricsController_getMetricsByDateRange: {
    parameters: {
      query: {
        applicationServiceId: number;
        metricType: "Bandwidth" | "Request" | "Error";
        startDate: string;
        endDate: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["MetricDto"][];
        };
      };
    };
  };
  /** Retrieve multiple ApplicationServiceMetrics */
  getManyBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single ApplicationServiceMetric */
  createOneBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceMetricCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"];
        };
      };
    };
  };
  /** Retrieve a single ApplicationServiceMetric */
  getOneBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"];
        };
      };
    };
  };
  /** Replace a single ApplicationServiceMetric */
  replaceOneBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceMetric"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"];
        };
      };
    };
  };
  /** Delete a single ApplicationServiceMetric */
  deleteOneBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single ApplicationServiceMetric */
  updateOneBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceMetric"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"];
        };
      };
    };
  };
  /** Create multipleApplicationServiceMetrics */
  createManyBaseApplicationServiceMetricControllerApplicationServiceMetric: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationServiceMetricDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceMetric"][];
        };
      };
    };
  };
  DeploymentLocationController_getDeploymentLocations: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DeploymentLocationDto"][];
        };
      };
    };
  };
  ServiceBuildController_provision: {
    parameters: {
      path: {
        applicationServiceId: number;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ServiceBuildController_init: {
    parameters: {
      path: {
        applicationServiceId: number;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ServiceBuildController_scaffold: {
    parameters: {
      path: {
        applicationServiceId: number;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ServiceBuildController_deploy: {
    parameters: {
      path: {
        applicationServiceId: number;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  ServiceBuildController_destroy: {
    parameters: {
      path: {
        applicationServiceId: number;
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  /** Retrieve multiple ApplicationServices */
  getManyBaseApplicationServiceControllerApplicationService: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single ApplicationService */
  createOneBaseApplicationServiceControllerApplicationService: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationService"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationService"];
        };
      };
    };
  };
  /** Retrieve a single ApplicationService */
  getOneBaseApplicationServiceControllerApplicationService: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationService"];
        };
      };
    };
  };
  /** Replace a single ApplicationService */
  replaceOneBaseApplicationServiceControllerApplicationService: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationService"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationService"];
        };
      };
    };
  };
  /** Delete a single ApplicationService */
  deleteOneBaseApplicationServiceControllerApplicationService: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single ApplicationService */
  updateOneBaseApplicationServiceControllerApplicationService: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationService"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationService"];
        };
      };
    };
  };
  /** Create multipleApplicationServices */
  createManyBaseApplicationServiceControllerApplicationService: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationServiceDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationService"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationService"][];
        };
      };
    };
  };
  /** Retrieve multiple InfrastructureStacks */
  getManyBaseInfrastructureStackControllerInfrastructureStack: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single InfrastructureStack */
  createOneBaseInfrastructureStackControllerInfrastructureStack: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["InfrastructureStackCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"];
        };
      };
    };
  };
  /** Retrieve a single InfrastructureStack */
  getOneBaseInfrastructureStackControllerInfrastructureStack: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"];
        };
      };
    };
  };
  /** Replace a single InfrastructureStack */
  replaceOneBaseInfrastructureStackControllerInfrastructureStack: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InfrastructureStack"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"];
        };
      };
    };
  };
  /** Delete a single InfrastructureStack */
  deleteOneBaseInfrastructureStackControllerInfrastructureStack: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single InfrastructureStack */
  updateOneBaseInfrastructureStackControllerInfrastructureStack: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InfrastructureStack"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"];
        };
      };
    };
  };
  /** Create multipleInfrastructureStacks */
  createManyBaseInfrastructureStackControllerInfrastructureStack: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyInfrastructureStackDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["InfrastructureStack"][];
        };
      };
    };
  };
  /** Retrieve multiple Users */
  getManyBaseUserControllerUser: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single User */
  createOneBaseUserControllerUser: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Retrieve a single User */
  getOneBaseUserControllerUser: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Replace a single User */
  replaceOneBaseUserControllerUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Delete a single User */
  deleteOneBaseUserControllerUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single User */
  updateOneBaseUserControllerUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  /** Create multipleUsers */
  createManyBaseUserControllerUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyUserDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  /** Retrieve multiple Workspaces */
  getManyBaseWorkspaceControllerWorkspace: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single Workspace */
  createOneBaseWorkspaceControllerWorkspace: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  /** Retrieve a single Workspace */
  getOneBaseWorkspaceControllerWorkspace: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  /** Replace a single Workspace */
  replaceOneBaseWorkspaceControllerWorkspace: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Workspace"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  /** Delete a single Workspace */
  deleteOneBaseWorkspaceControllerWorkspace: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single Workspace */
  updateOneBaseWorkspaceControllerWorkspace: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Workspace"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"];
        };
      };
    };
  };
  /** Create multipleWorkspaces */
  createManyBaseWorkspaceControllerWorkspace: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyWorkspaceDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Workspace"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["Workspace"][];
        };
      };
    };
  };
  /** Retrieve multiple WorkspaceUsers */
  getManyBaseWorkspaceUserControllerWorkspaceUser: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single WorkspaceUser */
  createOneBaseWorkspaceUserControllerWorkspaceUser: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceUserCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"];
        };
      };
    };
  };
  /** Retrieve a single WorkspaceUser */
  getOneBaseWorkspaceUserControllerWorkspaceUser: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"];
        };
      };
    };
  };
  /** Replace a single WorkspaceUser */
  replaceOneBaseWorkspaceUserControllerWorkspaceUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"];
        };
      };
    };
  };
  /** Delete a single WorkspaceUser */
  deleteOneBaseWorkspaceUserControllerWorkspaceUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single WorkspaceUser */
  updateOneBaseWorkspaceUserControllerWorkspaceUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkspaceUser"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"];
        };
      };
    };
  };
  /** Create multipleWorkspaceUsers */
  createManyBaseWorkspaceUserControllerWorkspaceUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyWorkspaceUserDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["WorkspaceUser"][];
        };
      };
    };
  };
  /** Retrieve multiple Applications */
  getManyBaseApplicationControllerApplication: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single Application */
  createOneBaseApplicationControllerApplication: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
    };
  };
  /** Retrieve a single Application */
  getOneBaseApplicationControllerApplication: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
    };
  };
  /** Replace a single Application */
  replaceOneBaseApplicationControllerApplication: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Application"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
    };
  };
  /** Delete a single Application */
  deleteOneBaseApplicationControllerApplication: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single Application */
  updateOneBaseApplicationControllerApplication: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Application"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
    };
  };
  /** Create multipleApplications */
  createManyBaseApplicationControllerApplication: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Application"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["Application"][];
        };
      };
    };
  };
  /** Retrieve multiple ApplicationServiceModels */
  getManyBaseApplicationServiceModelControllerApplicationServiceModel: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single ApplicationServiceModel */
  createOneBaseApplicationServiceModelControllerApplicationServiceModel: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"];
        };
      };
    };
  };
  /** Retrieve a single ApplicationServiceModel */
  getOneBaseApplicationServiceModelControllerApplicationServiceModel: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"];
        };
      };
    };
  };
  /** Replace a single ApplicationServiceModel */
  replaceOneBaseApplicationServiceModelControllerApplicationServiceModel: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"];
        };
      };
    };
  };
  /** Delete a single ApplicationServiceModel */
  deleteOneBaseApplicationServiceModelControllerApplicationServiceModel: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single ApplicationServiceModel */
  updateOneBaseApplicationServiceModelControllerApplicationServiceModel: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModel"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"];
        };
      };
    };
  };
  /** Create multipleApplicationServiceModels */
  createManyBaseApplicationServiceModelControllerApplicationServiceModel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationServiceModelDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModel"][];
        };
      };
    };
  };
  /** Retrieve multiple ApplicationServiceModelFields */
  getManyBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single ApplicationServiceModelField */
  createOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelFieldCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"];
        };
      };
    };
  };
  /** Retrieve a single ApplicationServiceModelField */
  getOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"];
        };
      };
    };
  };
  /** Replace a single ApplicationServiceModelField */
  replaceOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelField"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"];
        };
      };
    };
  };
  /** Delete a single ApplicationServiceModelField */
  deleteOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single ApplicationServiceModelField */
  updateOneBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelField"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"];
        };
      };
    };
  };
  /** Create multipleApplicationServiceModelFields */
  createManyBaseApplicationServiceModelFieldControllerApplicationServiceModelField: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationServiceModelFieldDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelField"][];
        };
      };
    };
  };
  /** Retrieve multiple ApplicationServiceModelAssociations */
  getManyBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single ApplicationServiceModelAssociation */
  createOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelAssociationCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
        };
      };
    };
  };
  /** Retrieve a single ApplicationServiceModelAssociation */
  getOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
        };
      };
    };
  };
  /** Replace a single ApplicationServiceModelAssociation */
  replaceOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
        };
      };
    };
  };
  /** Delete a single ApplicationServiceModelAssociation */
  deleteOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single ApplicationServiceModelAssociation */
  updateOneBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"];
        };
      };
    };
  };
  /** Create multipleApplicationServiceModelAssociations */
  createManyBaseApplicationServiceModelAssociationControllerApplicationServiceModelAssociation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationServiceModelAssociationDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceModelAssociation"][];
        };
      };
    };
  };
  /** Retrieve multiple ApplicationServiceApiKeys */
  getManyBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single ApplicationServiceApiKey */
  createOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceApiKeyCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"];
        };
      };
    };
  };
  /** Retrieve a single ApplicationServiceApiKey */
  getOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"];
        };
      };
    };
  };
  /** Replace a single ApplicationServiceApiKey */
  replaceOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceApiKey"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"];
        };
      };
    };
  };
  /** Delete a single ApplicationServiceApiKey */
  deleteOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single ApplicationServiceApiKey */
  updateOneBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationServiceApiKey"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"];
        };
      };
    };
  };
  /** Create multipleApplicationServiceApiKeys */
  createManyBaseApplicationServiceApiKeyControllerApplicationServiceApiKey: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManyApplicationServiceApiKeyDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationServiceApiKey"][];
        };
      };
    };
  };
  /** Retrieve multiple SchemaTemplates */
  getManyBaseSchemaTemplateControllerSchemaTemplate: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds search condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#search" target="_blank">Docs</a> */
        s?: string;
        /** @description Adds filter condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#filter" target="_blank">Docs</a> */
        filter?: string[];
        /** @description Adds OR condition. <a href="https://github.com/nestjsx/crud/wiki/Requests#or" target="_blank">Docs</a> */
        or?: string[];
        /** @description Adds sort by field. <a href="https://github.com/nestjsx/crud/wiki/Requests#sort" target="_blank">Docs</a> */
        sort?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Limit amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#limit" target="_blank">Docs</a> */
        limit?: number;
        /** @description Offset amount of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#offset" target="_blank">Docs</a> */
        offset?: number;
        /** @description Page portion of resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#page" target="_blank">Docs</a> */
        page?: number;
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Create a single SchemaTemplate */
  createOneBaseSchemaTemplateControllerSchemaTemplate: {
    /** @description The Description for the Post Body. Please look into the DTO. You will see the @ApiOptionalProperty used to define the Schema. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaTemplateCreate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"];
        };
      };
      /** @description Get create one base response */
      201: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"];
        };
      };
    };
  };
  /** Retrieve a single SchemaTemplate */
  getOneBaseSchemaTemplateControllerSchemaTemplate: {
    parameters: {
      query?: {
        /** @description Selects resource fields. <a href="https://github.com/nestjsx/crud/wiki/Requests#select" target="_blank">Docs</a> */
        fields?: string[];
        /** @description Adds relational resources. <a href="https://github.com/nestjsx/crud/wiki/Requests#join" target="_blank">Docs</a> */
        join?: string[];
        /** @description Reset cache (if was enabled). <a href="https://github.com/nestjsx/crud/wiki/Requests#cache" target="_blank">Docs</a> */
        cache?: number;
      };
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"];
        };
      };
    };
  };
  /** Replace a single SchemaTemplate */
  replaceOneBaseSchemaTemplateControllerSchemaTemplate: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaTemplate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"];
        };
      };
    };
  };
  /** Delete a single SchemaTemplate */
  deleteOneBaseSchemaTemplateControllerSchemaTemplate: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Update a single SchemaTemplate */
  updateOneBaseSchemaTemplateControllerSchemaTemplate: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaTemplate"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"];
        };
      };
    };
  };
  /** Create multipleSchemaTemplates */
  createManyBaseSchemaTemplateControllerSchemaTemplate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateManySchemaTemplateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"][];
        };
      };
      /** @description Get create many base response */
      201: {
        content: {
          "application/json": components["schemas"]["SchemaTemplate"][];
        };
      };
    };
  };
}
