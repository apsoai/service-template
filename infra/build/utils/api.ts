
import {
  ServiceStatus,
  ServiceType,
  SharedServiceParameters,
} from "../types/service";
import { logger } from './logger';
import axios from 'axios';

import createClient, { Middleware } from "openapi-fetch";
import type { paths } from "../sdk/schema"; // generated by openapi-typescript

const myMiddleware: Middleware = {
  async onRequest(req, options) {
    // set "foo" header
    // console.log("APSO API REQUEST: ", req);
    return req;
  },

};

const client = createClient<paths>({
  baseUrl: process.env.API_BASE_URL,
});

client.use(myMiddleware);

type Service = paths['/ApplicationServices/{id}']["get"]["responses"][200]["content"]["application/json"]
type Application = paths['/Applications/{id}']["get"]["responses"][200]["content"]["application/json"]
type InfraStack = paths['/InfrastructureStacks/{id}']["get"]["responses"][200]["content"]["application/json"]
type InfraStackCreation = paths['/InfrastructureStacks']["post"]["responses"][200]["content"]["application/json"]

interface NestedApplication extends Application {
  sharedDatabaseStack?: InfraStack;
}

export interface NestedService extends Service {
  databaseStack?: InfraStack;
  networkStack?: InfraStack;
  application?: NestedApplication;
  infrastructureDetails?: { [key: string]: any }
}

export const getServiceDetailsApi = async (
  serviceId: number
): Promise<NestedService> => {
  const { data, error } = await client.GET("/ApplicationServices/{id}", {
    params: {
      path: { id: serviceId },
      query: {
        join: [
          'networkStack', 'databaseStack', 'application', 'application.sharedDatabaseStack'
        ]
      },
    },
  });

  logger.info(`SERVICE ${JSON.stringify(data)}`)
  return data as NestedService;
};

export const updateServiceApi = async (serviceId: number, details: Partial<Service>): Promise<Service> => {
  const { data, error, response } = await client.PUT("/ApplicationServices/{id}", {
    params: {
      path: {
        id: serviceId,
      }
    },
    body: {
      ...details as Service
    }
  })

  // console.log('UPDATE SERVICE API ERROR', error)
  // console.log('UPDATE SERVICE API RESPONSE', response)
  return data
}

export const axiosUpdateServiceApi = async (serviceId: number, details: Partial<Service>): Promise<Service> => {
  const {data} = await axios.put(`${process.env.API_BASE_URL}/ApplicationServices/${serviceId}`, { ...details });

  return data
}

export const storeServiceDetailsApi = async (
  serviceId: number,
  serviceDetails: SharedServiceParameters
): Promise<void> => {
  // const url = getServiceUpdateUrl(serviceId);

  const infrastructureDetails = {};
  if (serviceDetails.codeCommitUrl) {
    infrastructureDetails["codeCommitUrl"] = serviceDetails.codeCommitUrl;
  }
  if (serviceDetails.dbUserCredentialsArn) {
    infrastructureDetails["dbCredentialsArn"] =
      serviceDetails.dbUserCredentialsArn;
  }

  if (Object.keys(infrastructureDetails).length === 0) {
    return;
  }

  const data = {
    infrastructure_details: infrastructureDetails,
  };

  if (serviceDetails.serviceUrl) {
    data["base_url"] = serviceDetails.serviceUrl;
  }
  console.log("writing to service", serviceId, JSON.stringify(data));
  // await axios.patch(url, data);
  // await updateServiceApi(serviceId, data);
  await axiosUpdateServiceApi(serviceId, data);
};

export const updateServiceStatus = async (
  serviceId: number,
  status: ServiceStatus
): Promise<void> => {
  // const url = getServiceUpdateUrl(serviceId);
  const data = { build_status: status };
  console.log("writing to service", serviceId, JSON.stringify(data));
  // await axios.patch(url, data);
  await updateServiceApi(serviceId, data);
};

export const updateServiceStacks = async (
  serviceId: number,
  stackId: string,
  networkStackId: number,
  databaseStackId: number
): Promise<void> => {
  // const url = getServiceUpdateUrl(serviceId);
  const data = { stack_id: stackId, networkStackId, databaseStackId };
  console.log("writing to service", serviceId, JSON.stringify(data));
  // await axios.patch(url, data);
  await updateServiceApi(serviceId, data);
};

export const getNetworkStackId = async (): Promise<number> => {
  const { data: response, error } = await client.GET("/InfrastructureStacks", {
    params: {
      query: {
        filter: [
          'stack_type||$eq||network'
        ],
        limit: 1,
      },
    },
  });
  
  const responseData: any = response.data && response.data[0]
  return responseData && responseData.id;
};

export const getDefaultDatabaseStack = async (): Promise<InfraStack | undefined> => {
  const { data: response, error } = await client.GET("/InfrastructureStacks", {
    params: {
      query: {
        filter: [
          'stackId||$eq||default-apso-database'
        ]
      },
    },
  });
  console.log(response);
  return response.data && response.data[0];
}

export const getDefaultNetworkStack = async (): Promise<InfraStack | undefined> => {
  const { data: response, error } = await client.GET("/InfrastructureStacks", {
    params: {
      query: {
        filter: [
          'stackId||$eq||default-apso-network'
        ]
      },
    },
  });
  console.log(response);
  return response.data && response.data[0];
}

export const getDatabaseStackId = async (
  networkStackId: number
): Promise<number> => {
  const { data: response, error } = await client.GET("/InfrastructureStacks", {
    params: {
      query: {
        filter: [
          "filter", "stack_type||$eq||database",
          "filter", `networkStackId||$eq||${networkStackId}`
        ],
        limit: 1,
      },
    },
  });
  const responseData: any = response.data && response.data[0]
  return responseData && responseData.id;
};

export const getServiceDetails = async (
  serviceId: number
): Promise<SharedServiceParameters> => {
  const apiResponse = await getServiceDetailsApi(serviceId);
  const serviceData = {
    serviceId,
    stackId: apiResponse.stack_id,
    serviceType: apiResponse.service_type === 'Lambda' ? ServiceType.Shared : ServiceType.Standalone,
    apsorc: apiResponse.apsorc,
    vpcId: apiResponse.networkStack?.details?.vpcId,
    dbUserCredentialsArn: apiResponse.infrastructure_details?.dbCredentialsArn,
    codeCommitUrl: apiResponse.infrastructure_details?.codeCommitUrl,
    serviceUrl: apiResponse.base_url,
    dbAdminCredentialsArn:
      apiResponse.databaseStack.details.masterCredentialsArn,
  };
  return serviceData as SharedServiceParameters;
};

export const storeInfrastructureDetailsApi = async (
  stackId: string,
  stackType: "network" | "database",
  details: any
): Promise<InfraStackCreation> => {
  const { data, error } = await client.POST("/InfrastructureStacks", {
    params: { },
    body: {
      stackId,
      stack_type: stackType,
      status: 'new',
      details,
      networkStackId: null
    }
  })

  return data
};

export const addDatabaseStack = async (
  stackId: string,
  details: any
): Promise<InfraStackCreation> => {

  const { data, error } = await client.POST("/InfrastructureStacks", {
    params: {},
    body: {
      stackId,
      stack_type: "database",
      status: 'new',
      details,
      networkStackId: null
    }
  });
  return data;
}
